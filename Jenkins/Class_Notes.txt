@@@@@@
DAY-1
@@@@@@

		Continuous Integration using Jenkins!
		
		
		DevOps Process, 
		
			dev						Continuous Dev. Stage -- IDE - Eclipse GIT
			int
			deli
			deployment
			monitor
			
		Build Orchestration Tool like Jenkins! to achieve CI/CD.
		
		C.I.
		
		Java Application -- Mavan Web Application!
		
		
		Coding - Build - Create Artifacts - Promote the App to Higher Environment for further testing --> Production -- Monitor
		
	Jenkins --> Build Orchestration Tool
	
		Coding 						===> Eclipse IDE, GIT
		Build						===> Compiling the source code & Create Artifacts(binaries *.jar / *.war) *.dll / *.exe
										 Maven build 
		Deployment 					===> Ansible/Docker/K8s / SSH ( Deployed to Testing envi.)
		Automated Testing 			===> Junit / Selenium
		Prod Deployment 			===> Ansible/Docker/K8s
		Monitoring(Appln./Infra.) 	===> Prometheus / Grafana / AppDynamics
		
		
	Pipeline as scripts == Uses Groovy Scripts!
	
	:::
	
	Jenkins Architecture!
	
	What is the role of DevOps Engineer ?
		
		Jenkins Server Level Management :
			Jenkins Administrator.			Master / slave - Architecture.
			Create Jenkins Servers 
			Manage Jenkins Servers/
			Manage Jenkins Users
			Manage Jenkins Plugins
			Manage Upgrades
			Manage Backups / Recovery
			
		Jenkins - Application Level Management :		
			Create Jenkins CI/CD Jobs			
			Create CI/CD Pipeline Templates 
			
	
	What is the role of Developer ?
		Just considers as a consumer of Jenkins Tools & Services.
		CI/CD Pipeline Templates 
		
		User1 : --> CI/CD Pipeline Execution, Check the Jenkins Job console for Output, Trigger any dependency build. 
	
	
	Jenkins : Groovy Scripts!
	Gitlab-ci,Az pipeline,AWS CodeBuild	: Yaml Scripts / Python
	
	Scripts :::
	
		Data 
		Variables
		Arrays
		File System
		Looping
		Condition Stmts
		Remote connection & Remote server Handling.
		
		Handle the Tools specific - CLI Commands / APIs
	

	Jenkins Architecture ::
		Master - Slave		VMs			-- Is used to distribute the Jenkins Workload.

			Master -- Install Jenkins -- Create Jenkins CI/CD Pipeline Jobs -- Execute CI/CD Pipeline
			
				Slave Machines == Actual Build Happens. 
		
	
	
	Master -- Install Jenkins -- Create Jenkins CI/CD Pipeline Jobs -- Schedule the jobs to corresponding Slave Machines
		
		Slave1		Java Application  -- Jdk / GIT / Maven  ---> 1000 Microservices - > Storage / CPU
		Slave1.1	Java Application  -- Jdk / GIT / Maven  ---> 1000 Microservices - > Storage / CPU
	
		Slave2		.Net Application	-- .Net Framework
		Slave3		Python Web Application -- PY
		
		
	Load - Balancing!
	
	Ansible  / Terraform!
	
	
	
	CI/CD Pipeline ????
	
	
	
	Coding - Build - Create Artifacts - Promote the App to Higher Environment for further testing --> Production
		
		
	CI/CD Pipeline/Job ????
	
	Stages :
		
		SCM Checkout Stage 
		Build 
		Create Artifacts
		Deploy/Deliver to target Machine 
		
	
	
	Installation of Jenkins Servers ::
	
		Master & Slave Architecture 
		
		https://www.jenkins.io/doc/book/installing/
	
		Configure Jenkins Master :
		
			Jenkins should be installed in Master only.
			
			Access Jenkins thru browser!
			
			Jenkins should be executed as a service in that VM.
			Runs in port 8080.
			
			<ip-Elastic/static/public>:8080
			
			REST APIs
			
			Load 
			
			json / yaml 
			
	
	VS Code :::
		Install some extension -
		
		Jenkins Server 
		
			Master / Slave Architecture
	
	Install Jenkins & Started in Web Browser using Port : 8080
	http://<external_ip_addr>:8080
	
	http://43.204.216.161:8080/

	On Jenkins Dashboard :::
	
	Build Executer -- No. of build that can be executed simultaneously! - 5  
	
	If I trigger 10 Jobs? 

	Build Queue

	Jenkins Master 	--> Non-Prod 
	
		build and deployment in Non-Prod Environments(DEV/QA/UAT) 
		
	Jenkins Master  --> Prod
	
		To execute Production Jobs 
	
@@@@@@@@@
DAY-2
@@@@@@@@@


		Launch Ec2 instances, and access thru MobaXterm!
		
		Jenkins Job/project?
			
			Pipeline Jobs
			
			Stages :::: 

			Trigger the builds!
			
		Infra Team !!!
		
			Environments ::
			
			Non-Prod 														Prod Envi.
			
			Dev																Prod_Servers 
			Testing Servers 
				QA
				UAT
				pre-prod/staging
				
			
			Run these servers only during business hrs.
			Jenkins Job ==> Start and stop the servers as per schedule.
			
			Plugins ==> Extensions to Jenkins 
	
			Installed Maven :: latest version 

			Software / Appln. Package Management :
			
				latest verion 				
				current -1 version 
				
			
			Software Central ==> d:/jenkins/plugins
	
	
	
			Jobs -- can be triggered Manually / thru some schedules
			1
			
			
			job1 --> Tasks(backup of volume/Start dev servers) ==> Notify the users about the status of the job.
			
			Job1(to copy some files from dev server to qa server) --> Job2(Cleanup my dev Server)
			
			Serial Execution.
			
			Created Jenkins Free Style Project
			
			Generic!
			
			Job1 ==> 	(Deploy the artifacts to Target servers(QA/UAT/PROD....100))
			
			Parameters! -- Variables!
			
				-	Environmental Variables			
				
				-	User-Defined Variables
			
			Email notification:::
			
			job1 --> Tasks(backup of volume/Start dev servers) ==> Notify the users about the status of the job.
				
			echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
			
			Jenkins - Freestyle project.
			
			Pipeline Project. 





			CI/CD Pipeline-Project1
			
			Stages :
				
				SCM Checkout Stage 
				Build 
				Create Artifacts
				Deploy/Deliver to target Machine - PROD		
		

			CI/CD Pipeline-Project2
				Perform Auto-Monitoring for Envi & User Access

			CI/CD Pipeline-Project2
			
			Stages :
				
				SCM Checkout Stage 
				Build 
				Create Artifacts
				Deploy/Deliver to target Machine 	
			
			
			How to create Jenkins Pipeline!!!   - scripts/code
			
			
			CI/CD Pipeline-Project1					
				
				SCM Checkout Stage 
			
			CI/CD Pipeline-Project3				
				
				Code Build 
	
	
		Jenkins Pipeline Project:::
		
			Scripted Pipeline
node {
    def mvnHome
    stage('Preparation') { // for display purposes
        // Get some code from a GitHub repository
        git 'https://github.com/jglick/simple-maven-project-with-tests.git'
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        mvnHome = tool 'M3'
    }
    stage('Build') {
        // Run the maven build
        withEnv(["MVN_HOME=$mvnHome"]) {
            if (isUnix()) {
                sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
            } else {
                bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
            }
        }
    }
    stage('Results') {
        junit '**/target/surefire-reports/TEST-*.xml'
        archiveArtifacts 'target/*.jar'
    }
}
			
			
			Declarative Pipeline 

pipeline {
    agent any

    stages {
		
        stage('SCM Checkout') {
		
            steps {
                echo 'Hello World'
            }
        }
		
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Create Artifacts') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Hello World'
            }
        }
		
    }
}	
	
		Pipeline Snippet Generator
	
Summary ::

		Jenkins :
			Understand the importance of Jenkins ::
				Master / Slave 
			Installation of Jenkins in Amazon Linux Machine
			Explore Jenkins Dashboard 
			Manage Jenkin :
				Sys Config - Plugin Manager - Global tool config
			Create Freestyle Project & Pipeline Projects			
			How to run
			How to check the console output 
			Variables : Environment Variables & User-Defined Variables
			Pipeline Stages 
	
@@@@@@@
DAY-3
@@@@@@@	
	
	
		-	Pipeline Snippet Generator		
		-	Jenkins Master & Slave Configuration!
	
	Master -- Install Jenkins -- Create Jenkins CI/CD Pipeline Jobs -- Schedule the jobs to corresponding Slave Machines
		
		Slave1		Java Application  -- Jdk / GIT / Maven  ---> 1000 Microservices - > Storage / CPU
		Slave1.1	Java Application  -- Jdk / GIT / Maven  ---> 1000 Microservices - > Storage / CPU
	
		Slave2		.Net Application	-- .Net Framework
		Slave3		Python Web Application -- PY		
	
	
	- Create Jenkins Master Slave Architecture :::
	
		Jenkins Master			---> jdk, jenkins
		
			Slave1 - build a Java Maven Web Application ==> git, jdk, Maven
			What is Application Build ?
				Is a process of compiling the src code and create artifacts(*.war)
				
			SSH Connection :::
				Create a valid user with SSH Keys (private/public)
				
			
		How to Configure Jenkins Slave/Node

	
	***Jenkins_master ( Non-Prod )					
	***Jenkins_master ( Prod )
	
	
@@@@@@@
DAY-4
@@@@@@@	

	Jenkins Master
		Slave Machine 
		
	Configured Node in Jenkins 
		
		Simple freestyle project / simple Pipeline project 
	
	Distributed build!
	
	Build !!!!
	
		Java Maven Web Application ===> 
		Perform Build
		Create Artifacts 
		
		Deploy the artifacts.
		
	CI/CD 
	
		--> SCM Checkout 
		
	Overview of Application Development Process ::::
	
	
	Developer1 
	
		New Project 		
		Bugfix		
		Enhancements
	
	Development Cycle :::
	
		Developer1 --> Create the Source Code, build, create artifacts, Perform Unit Testing.
	
		Artifacts will be promoted to Higher Environment! (QA/UAT/Staging)
		
	Test Cycle :::
		(QA/UAT/Staging)
		
	Release Cycle :::
		(Prod)		
		
	Who are all involved in this process ????
	
		Developers
			Appln. Lead/Owner 
		Testing Team
			Perform End-to-end Testing
		Release Management Team 
			Prod Release 		
		
		Emails ::::
		
		Testing Team :::: SLA --- 10 Days 1 1-2 Days within 2hrs 
		
		Emails - Developers / Release Management Team  
		
	DevOps ::::
	
		1. Improve the Developers Productivity --> 
			Developers --> Commit the src code into the src code repo.  (Microservice) 	Contiuous Integration 			jdk11, Maven, tomcat8.0 
			
							Jenkins will takes the responsibility to perform build, artifacts creation, automated unit testing.			Package/image1 (*.war,jdk11,tomcat8.0)		
								Once the Unit is completed 	--> if it is successful promote the artifacts to Test envi. & Notify Testing Team.
															--> if it is failing --- Notify Developer to fix that issue.
			
		2. Reduces the Testing Time (QA Envi.) == Static Testing 	Continuous Testing (QA/UAT/PROD) ---> jdk8, tomcat7.0  image1
			Testing Team == Test Automation. ==> Notify the status.
			API / CLI Command 
			
				Creating the Test Scenarios 
				Test Cases -- 50 
				Test Data
				Test Strategies --> Regression!
				
				Covered all the test Scenarios ???
				
				Test Reports - TestNG ==>  == 100% Test coverage and it is successful.
				
				Notify to Dev & Rel. Mgmt. Team
				
			UAT Envi.				
				Business Users will do the UAT Testing.				
				Dynamic 
				
				Notify to Rel. Mgmt Team 			
			
		
		3. Increase the Release cycles 
		
				Continuous Delivery / Deployment
				
				Security team. ==> Security Audit --> Security Scanning --> Static/Dynamic 
		
				Release -- Prod. Version 
				
			Continuous Monitoring - AppDynamics / Promethus / Nagios / Splunk -- Jenkins pipeline 
			
	Automate This Process :::
	
		Jenkins 
	
	www.amazon.com !  infra, code 
	
		signup  			-->  	User Information --> dbase --> src code (fetch_user_details.java) - container1(many replicas) Image
		
		signin
		search
		order
		payment
		track 
	
	Mircoservice Architecture! ==> Application Owner / Architects 
	
		Git Workflow
		
		Git Branch Strategies 
		
		CI/CD Pipeline 
	
	Java appln. Artifacts -- are created == jdk, maven, tomcat / nginx
	
	Containers == Docker Container 
	
	Kubernetes is a Container Orchestration Tool.
	
		Ensure High availability of your appln. ???
		Load Balancing
		Auto-Scaling!		Scale-Up / Down
	
	Jenkins -- Build Orchestration Tool.
	
	AWS -- EKS
	AZ 	-- AKS
	GCP -- GCP 
	
IAC 
	Ansible --> CMS
	Terraform --> 
	
Jenkins CI Pipeline :::

	Jenkins will takes the responsibility to perform build, artifacts creation, automated unit testing.
	
	
	First :
	
		Checkout the code from SCM
		
		Build & Create Artifacts!
	
	
	
pipeline {
    agent {
        label 'Slave1'
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
                echo 'adfasdfasdfasdfasdf'
                sh 'echo "adfasd" >> f1.txt'
            }
        }
    }
}


pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/jglick/simple-maven-project-with-tests.git'

                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
    }
}


pipeline {
    
    agent {
        label 'Slave1'
    }

    tools 
    {
        maven 'Maven-3.8.7'
    }
    
    stages {
        stage('SCM-Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'

            }
			}
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
			}		
    }
}


	Next :::
		Deploy to QA Envi.
		
			Launch a Instance 
				install jdk
				install tomcat 
			
			Connect this to Jenkins Master 
			Use Publish over SSH Plugin to copy the artifacts from slave1 to QA Server.
			
			


	Understand about Java Maven Project !!!!
	
	Java Project !
	
		*.java -->
		
	Java Maven appln. --> simple desktop / Web Appln.
	
		Maven is a Build Automation Tool.
		
		Plugins/dependencies needed to perform Maven Build. 
		
		mvn clean package -Dmaven.*.*.*
		mvn build 
		mvn clean install
		
		
		POM.xml file 
		  it is created by developers and maintain it in the source code repo.
		

Summary ::

		Jenkins :
			Understand the importance of Jenkins ::
				Master / Slave 
			Installation of Jenkins in Amazon Linux Machine
			Explore Jenkins Dashboard 
			Manage Jenkin :
				Sys Config - Plugin Manager - Global tool config
			Create Freestyle Project & Pipeline Projects			
			How to run
			How to check the console output 
			Variables : Environment Variables & User-Defined Variables
			Pipeline Stages 
				Pipeline snippet generator!!!!
			
			
			Working on Master & Slave 
			
			Create CI Pipeline for Maven Build 
			

@@@@@@@@
DAY-5
@@@@@@@@

		Junit -- unit test! 
		
		Slave Machine!!! 	--> Build Server -- install Maven.
		
								Build Server -- Install Python.




pipeline {
    
    agent {
        label 'Slave1'
    }

    tools 
    {
        maven 'Maven-3.8.7'
    }	
    
    stages {
        stage('SCM-Checkout') {
            steps {
                // Get some code from a GitHub repository
                git "${GIR_REPO_URL}"

            }
			}
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                //sh "mvn -Dmaven.test.failure.ignore=true clean package"
				sh "${MVN_Command}"
            }
			}
    }
}


Important Maven Commands

mvn -version 		==> Find the maven version
mvn compile 		==> compiles source files
mvn test-compile 		==> compiles test files - one thing to observe is this also compiles source files
mvn clean 		==> deletes target directory
mvn test 		==> run unit tests
mvn package 		==> creates a jar for the project
help:effective-settings 	==> Debug Maven Settings
help:effective-pom 	==> Look at the complete pom after all inheritances from parent poms are resolved
dependency:tree 		==> Look at all the dependencies and transitive dependencies
dependency:sources 	==> Download source code for all dependencies
-debug 			==> Debug flag. Can be used with all the above commands			


workspace/SCM-Demo-CIPipeline-JavaMVN/target/mvn-hello-world.war

Continuous Integration 

CI/CD 

	Deployment ::::
	
			Deployment -- process of copying the artifacts from one server to another.
			
							Eg.: Build_Server to QA to UAT to Prod 

	
		Jenkins_Master 
			Jenkins_Slave 	build, created artifacts.			*.war
			
			Host_Servers / target servers / deployment servers ==> VM - Hardware
				--> Install Application Server - Software (Tomcat/Nginx)
			
			
			Deploy the artifacts from Build_Server to Tomcat_Server thru Jenkins pipeline.
			
			
	
	
		Dev		--> 	Build_Server	-->		Test_Servers(QA/UAT)	--> 	Production_Servers
		
		
		Tomcat_Server Installation :::		
		
		
	DEV Team ::: Build_Server --> create artifacts. *.war 
	
	Testing Team ::: 
		Test Environment : *.war 
		We need Application_Server(Tomcat) to run the java web application.
		
		
		
		Infra-structure Team :::: Provisioning Infra-structure and Configure the Infra-structure
			Terraform/Ansible.
			
			
	Jenkins Automated Deployment - Workflow :::
	
		Jenkins_Master
			Jenkins_Slave		--> created artifacts here mvn-hello-world.war
		
		QA-Server with Tomcat.
		
			devopsadmin & private key.
			
			Deploy/copy *.war file 	--> from Jenkins_Slave 				to 		QA-Server/Tomcat-Server
									--> target/mvn-hello-world.war		to 		/opt/tomcat/webapps	

		
		Publish-over-ssh Plugins ::::
		
		Docker
		Ansible
		Kubernetes 
		
		Publish-over-ssh Plugins :::: Install and Config in Jenkins Master
		
			-	Install Publish-over-ssh Plugin and restart Jenkins Master.
				Enable Restart Option while installing this.
				(or) systemctl restart jenkins 
			
			- 	Go to Manage Jenkins - > Config System 
		
		
		CI/CD --->
		
		Jenkins_Master
			Jenkins_Slave		--> created artifacts here mvn-hello-world.war
		
		QA-Server with Tomcat.
		
			devopsadmin & private key.
			
			Deploy/copy *.war file 	--> from Jenkins_Slave 				to 		QA-Server/Tomcat-Server
									--> target/mvn-hello-world.war		to 		/opt/tomcat/webapps		

		VCS -- GIT source 
		
		version control the Artifacts 
			use Artifactory Repository eg.: Jfrog Artifactory
			
			mvn-hello-world:v1.0_SNAPSHOT
			mvn-hello-world:v2.0_SNAPSHOT
			
			PROD_Envi 
		
		Jenkins *
		
		CI/CD 
		
		Continuous Integration
		Continuous Delivery
		Continuous Deployment
		
		Build_Server ---> QA --> UAT ---> (Approval Stage) ---> PROD_Server 
		
		CI/CD Pipeline!

Next:::
		
		build periodic, poll scm, github webhook! == automate the build trigger!
		
		Email Notification 
		
	Developers Create the src code using IDE --> Commit to GITHUB --> 
	
		Jenkins!
		
			M/Slave/plugin Management/ConfigSys/Build Pipeline/QA-Server(Tomcat)
			
@@@@@@@@
Day-6
@@@@@@@@

	Automated Build & Deployments!!!
	
		Jenkins Job Scheduler :::
		
		
		-	Developer using their VS Code / Eclipse IDE for Coding & Development 
		-	Commit the src code to github repo.
		- 	Jenkins CI/CD pipeline shd get triggered automatically!..

		
		
		Job1 --> Job2 
		
	 UseCase1 : 
	 
	 Jenkins Admin ;;; 
	 
		Non-Prod Servers 									Prod-Servers 
		
		DEV													PROD-1,2,3 
		QA
		UAT
		
		
	Jenkins Master - Non-Prod & 
	
	
	
	Prod -- Replicas of Prod Jenkins_Master

		Schedule Jobs ::: 
			- Jenkins Job1 --> Start all my Non-Prod Server @9AM EveryDay
			- Jenkins Job2 --> Stop all my Non-Prod Server @9PM EveryDay
			
		Production_Servers --> 
		
			CPU
			Memory ==> Cleanup unwanted files from Prod.  Jenkins 
			
			
			Jenkins Workspace  --> last 3 days projects in workspace

		
		Github webhook :
			want to trigger a build for every commit happened in the src repo 
		
		Poll-SCM :		
			want to trigger a build for every one hour only if there is any commit happened in the src repo
			
		
	Build-Cycle :: CI  -->  Unit level Testing -- Always Continuous
	
	Test-Cycle :: QA / UAT (daily 9AM)
					CI/CD --> based upon time interval. 
					
					4Hours ---> Poll-SCM :
					
	
	Prod Release-Cycle ::
						Continuous Delivery / Deployment
						Hourly Release 
						daily prod release
						bi-weekly
						monthly 
						
						
	Job1 				--> 
	
	Job2 				
	
	Job3 
						
	
	
	Github 
	
	gitlab
	
	az-repository
	aws-code commit 
	g-repos 
	
	
	
	
	
	Notification !!! 
	
	Automation!
	
		build - success/failure 
		
		ALL the failures should be notified.
		
		SCM checkout - success ==>
		
		Deploy to QA - successful/Failure -- Notify to DEV 
		
		UAT --> Business User 
		
		Prod --> Rel Mgmt Teams 
		
	Email Notifications!
	
		Envi Varibles 
		
		
		To Enable Email Notification ::
		
			-	Configure Email Server.
			-	Pipeline Snippet Generator to create the syntax for Email Notifications
			- 	Update the pipeline as a post build action.
	
CI/CD 

		Jenkins_Master ==> Non-Prod 
		
			DEV-Envi
			QA-Envi
			UAT-Envi
		
		
		Monitoring Tools :::
			Jenkins_master 
		
		
	Summary ::::
	
			Build Triggers :
				poll scm | build periodic | github webhooks
				
			Email Notification :
			
			Misc. Admin : Global Security , credential Mgmt.
